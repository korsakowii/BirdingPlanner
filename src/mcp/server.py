"""
Model Context Protocol (MCP) Server for BirdingPlanner.
Main entry point for AI agent orchestration and trip planning.
"""

import logging
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

from .orchestrator import AgentOrchestrator, AgentTask
from ..models.trip import TripRequest, TripPlan
from ..config.settings import get_settings


class MCPServer:
    """
    Model Context Protocol Server for BirdingPlanner.
    
    This server orchestrates AI agents to create comprehensive birding trip plans.
    It provides both programmatic and command-line interfaces for trip planning.
    """
    
    def __init__(self, settings=None):
        """Initialize the MCP server."""
        self.settings = settings or get_settings()
        self.logger = logging.getLogger("MCPServer")
        
        # Initialize agent orchestrator
        self.orchestrator = AgentOrchestrator(settings)
        
        # Server status
        self.status = "initialized"
        self.start_time = datetime.now()
        self.request_count = 0
        
        self.logger.info("MCP Server initialized with AI agent orchestration")
    
    def create_trip_plan(self, 
                        species: List[str],
                        base_location: str,
                        date_range: str,
                        max_stops: int = 3,
                        output_dir: Optional[str] = None) -> TripPlan:
        """
        Create a comprehensive trip plan using AI agents.
        
        Args:
            species: List of target bird species
            base_location: Base location for the trip
            date_range: Date range for the trip
            max_stops: Maximum number of stops
            output_dir: Optional output directory for saving results
            
        Returns:
            TripPlan: Complete trip plan generated by AI agents
        """
        self.request_count += 1
        self.logger.info(f"Processing trip plan request #{self.request_count}")
        
        try:
            # Create trip request
            request = TripRequest(
                species=species,
                base_location=base_location,
                date_range=date_range,
                max_stops=max_stops
            )
            
            # Use agent orchestrator to create trip plan
            trip_plan = self.orchestrator.create_trip_plan(request)
            
            # Save results if output directory specified
            if output_dir:
                self._save_trip_plan(trip_plan, output_dir)
            
            self.logger.info(f"Trip plan created successfully for {len(species)} species")
            return trip_plan
            
        except Exception as e:
            self.logger.error(f"Failed to create trip plan: {str(e)}")
            raise
    
    def execute_agent_task(self, agent_name: str, task_type: str, 
                          input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Execute a specific agent task.
        
        Args:
            agent_name: Name of the agent (SpeciesAgent, RouteAgent, ContentAgent)
            task_type: Type of task to execute
            input_data: Input data for the task
            
        Returns:
            Dict: Task execution results
        """
        self.logger.info(f"Executing {task_type} task with {agent_name}")
        
        try:
            task = AgentTask(
                agent_name=agent_name,
                task_type=task_type,
                input_data=input_data
            )
            
            result = self.orchestrator.execute_agent_task(task)
            return result.__dict__
            
        except Exception as e:
            self.logger.error(f"Agent task execution failed: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "agent_name": agent_name,
                "task_type": task_type
            }
    
    def get_server_status(self) -> Dict[str, Any]:
        """Get server status and statistics."""
        return {
            "server": {
                "status": self.status,
                "start_time": self.start_time.isoformat(),
                "uptime_seconds": (datetime.now() - self.start_time).total_seconds(),
                "request_count": self.request_count
            },
            "agents": self.orchestrator.get_agent_status(),
            "capabilities": self.orchestrator.get_agent_capabilities()
        }
    
    def get_agent_capabilities(self) -> Dict[str, List[str]]:
        """Get capabilities of all available agents."""
        return self.orchestrator.get_agent_capabilities()
    
    def health_check(self) -> Dict[str, Any]:
        """Perform health check on server and agents."""
        try:
            agent_status = self.orchestrator.get_agent_status()
            all_agents_healthy = all(
                agent.get("status") == "active" 
                for agent in agent_status["agents"].values()
            )
            
            return {
                "status": "healthy" if all_agents_healthy else "degraded",
                "timestamp": datetime.now().isoformat(),
                "agents_healthy": all_agents_healthy,
                "total_agents": len(agent_status["agents"]),
                "server_uptime": (datetime.now() - self.start_time).total_seconds()
            }
            
        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    def _save_trip_plan(self, trip_plan: TripPlan, output_dir: str):
        """Save trip plan to output directory."""
        try:
            output_path = Path(output_dir)
            output_path.mkdir(parents=True, exist_ok=True)
            
            # Save trip plan markdown
            trip_plan_path = output_path / "trip_plan.md"
            with open(trip_plan_path, 'w', encoding='utf-8') as f:
                if hasattr(trip_plan, 'content') and hasattr(trip_plan.content, 'trip_plan_markdown'):
                    f.write(trip_plan.content.trip_plan_markdown)
                elif hasattr(trip_plan, 'trip_plan_markdown'):
                    f.write(trip_plan.trip_plan_markdown)
                else:
                    f.write("# AI-Generated Trip Plan\n\n")
                    f.write("Trip plan generated by AI agents.\n")
            
            # Save trip data as JSON
            trip_data_path = output_path / "trip_data.json"
            with open(trip_data_path, 'w', encoding='utf-8') as f:
                if hasattr(trip_plan, 'to_dict'):
                    trip_data = trip_plan.to_dict()
                else:
                    trip_data = trip_plan
                json.dump(trip_data, f, indent=2, default=str)
            
            # Save story cards
            if hasattr(trip_plan, 'content') and hasattr(trip_plan.content, 'story_cards') and trip_plan.content.story_cards:
                story_dir = output_path / "story_cards"
                story_dir.mkdir(exist_ok=True)
                
                for i, story in enumerate(trip_plan.content.story_cards):
                    story_path = story_dir / f"story_{i+1:02d}.txt"
                    with open(story_path, 'w', encoding='utf-8') as f:
                        if hasattr(story, 'species'):
                            f.write(f"Species: {story.species}\n")
                        if hasattr(story, 'tier'):
                            f.write(f"Tier: {story.tier}\n")
                        if hasattr(story, 'location'):
                            f.write(f"Location: {story.location}\n")
                        if hasattr(story, 'date'):
                            f.write(f"Date: {story.date}\n")
                        if hasattr(story, 'ai_enhanced'):
                            f.write(f"AI Enhanced: {story.ai_enhanced}\n")
                        f.write(f"\n")
                        if hasattr(story, 'story'):
                            f.write(story.story)
                        elif isinstance(story, dict):
                            f.write(str(story))
            
            # Save social captions
            if hasattr(trip_plan, 'content') and hasattr(trip_plan.content, 'social_captions') and trip_plan.content.social_captions:
                social_dir = output_path / "social_captions"
                social_dir.mkdir(exist_ok=True)
                
                for i, caption in enumerate(trip_plan.content.social_captions):
                    caption_path = social_dir / f"caption_{i+1:02d}.txt"
                    with open(caption_path, 'w', encoding='utf-8') as f:
                        if hasattr(caption, 'species'):
                            f.write(f"Species: {caption.species}\n")
                        if hasattr(caption, 'tier'):
                            f.write(f"Tier: {caption.tier}\n")
                        if hasattr(caption, 'ai_optimized'):
                            f.write(f"AI Optimized: {caption.ai_optimized}\n")
                        f.write(f"\n")
                        if hasattr(caption, 'caption'):
                            f.write(caption.caption)
                        elif isinstance(caption, dict):
                            f.write(str(caption))
                        if hasattr(caption, 'hashtags'):
                            f.write(f"\n\nHashtags: {' '.join(caption.hashtags)}")
            
            self.logger.info(f"Trip plan saved to {output_dir}")
            
        except Exception as e:
            self.logger.error(f"Failed to save trip plan: {str(e)}")
            raise
    
    def run_interactive_mode(self):
        """Run the server in interactive mode."""
        print("ðŸ¦… BirdingPlanner MCP Server - AI Agent Orchestration")
        print("=" * 60)
        print("Available commands:")
        print("  plan <species1> <species2> ... --location <loc> --date <range>")
        print("  status")
        print("  health")
        print("  capabilities")
        print("  quit")
        print()
        
        while True:
            try:
                command = input("MCP> ").strip()
                
                if command.lower() in ['quit', 'exit', 'q']:
                    print("Goodbye! ðŸ¦…")
                    break
                
                elif command.lower() == 'status':
                    status = self.get_server_status()
                    print(f"Server Status: {status['server']['status']}")
                    print(f"Uptime: {status['server']['uptime_seconds']:.1f} seconds")
                    print(f"Requests: {status['server']['request_count']}")
                    print(f"Agents: {status['agents']['total_agents']}")
                
                elif command.lower() == 'health':
                    health = self.health_check()
                    print(f"Health: {health['status']}")
                    print(f"Agents Healthy: {health['agents_healthy']}")
                    print(f"Uptime: {health['server_uptime']:.1f} seconds")
                
                elif command.lower() == 'capabilities':
                    capabilities = self.get_agent_capabilities()
                    for agent, caps in capabilities.items():
                        print(f"{agent}: {', '.join(caps)}")
                
                elif command.startswith('plan '):
                    # Parse plan command
                    parts = command[5:].split(' --')
                    species_part = parts[0].strip()
                    species = [s.strip() for s in species_part.split()]
                    
                    location = "New York"  # Default
                    date_range = "Spring 2024"  # Default
                    
                    for part in parts[1:]:
                        if part.startswith('location '):
                            location = part[9:].strip()
                        elif part.startswith('date '):
                            date_range = part[5:].strip()
                    
                    print(f"Creating trip plan for {len(species)} species in {location}...")
                    trip_plan = self.create_trip_plan(species, location, date_range)
                    print(f"Trip plan created successfully!")
                    print(f"Total stops: {trip_plan.trip_overview.total_stops}")
                    print(f"Total distance: {trip_plan.trip_overview.total_distance_km:.1f} km")
                
                else:
                    print("Unknown command. Type 'help' for available commands.")
                    
            except KeyboardInterrupt:
                print("\nGoodbye! ðŸ¦…")
                break
            except Exception as e:
                print(f"Error: {str(e)}")


def main():
    """Main entry point for MCP server."""
    import argparse
    
    parser = argparse.ArgumentParser(description="BirdingPlanner MCP Server")
    parser.add_argument("--interactive", "-i", action="store_true", 
                       help="Run in interactive mode")
    parser.add_argument("--species", nargs="+", help="Target species")
    parser.add_argument("--location", help="Base location")
    parser.add_argument("--date", help="Date range")
    parser.add_argument("--output", help="Output directory")
    parser.add_argument("--status", action="store_true", help="Show server status")
    parser.add_argument("--health", action="store_true", help="Perform health check")
    
    args = parser.parse_args()
    
    # Initialize server
    server = MCPServer()
    
    if args.status:
        status = server.get_server_status()
        print(json.dumps(status, indent=2))
    
    elif args.health:
        health = server.health_check()
        print(json.dumps(health, indent=2))
    
    elif args.interactive:
        server.run_interactive_mode()
    
    elif args.species and args.location:
        trip_plan = server.create_trip_plan(
            species=args.species,
            base_location=args.location,
            date_range=args.date or "Spring 2024",
            output_dir=args.output
        )
        print(f"Trip plan created successfully!")
        print(f"Total stops: {trip_plan.trip_overview.total_stops}")
        print(f"Total distance: {trip_plan.trip_overview.total_distance_km:.1f} km")
    
    else:
        parser.print_help()


if __name__ == "__main__":
    main() 