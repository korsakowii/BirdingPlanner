"""
Agent Orchestrator for BirdingPlanner.
Coordinates multiple AI agents to create comprehensive birding trip plans.
"""

import logging
from typing import Dict, List, Any, Optional

from datetime import datetime

from ..models.trip import TripRequest, TripPlan, TripSummary, TripContent
from ..models.species import Species
from ..models.route import Route
from ..core.birding_planner import BirdingPlanner
from .agents import SpeciesAgent, RouteAgent, ContentAgent


from .agents import AgentTask, AgentResult


class AgentOrchestrator:
    """
    Orchestrates multiple AI agents to create comprehensive birding trip plans.
    
    This class coordinates the work of specialized AI agents:
    - SpeciesAgent: Handles species classification and analysis
    - RouteAgent: Optimizes routes and locations
    - ContentAgent: Generates stories and content
    """
    
    def __init__(self, settings=None):
        """Initialize the agent orchestrator."""
        self.settings = settings
        self.logger = logging.getLogger("AgentOrchestrator")
        
        # Initialize agents
        self.species_agent = SpeciesAgent()
        self.route_agent = RouteAgent()
        self.content_agent = ContentAgent()
        
        # Initialize core planner for fallback
        self.core_planner = BirdingPlanner(settings)
        
        self.logger.info("Agent Orchestrator initialized with 3 AI agents")
    
    def create_trip_plan(self, request: TripRequest) -> TripPlan:
        """
        Create a comprehensive trip plan using AI agents.
        
        Args:
            request: TripRequest containing trip parameters
            
        Returns:
            TripPlan: Complete trip plan generated by AI agents
        """
        self.logger.info(f"Starting AI-powered trip planning for {len(request.species)} species")
        
        try:
            # Step 1: Species Analysis with AI Agent
            self.logger.info("Step 1: AI Species Analysis...")
            species_results = self._execute_species_analysis(request)
            
            # Step 2: Route Optimization with AI Agent
            self.logger.info("Step 2: AI Route Optimization...")
            route_results = self._execute_route_optimization(request, species_results)
            
            # Step 3: Content Generation with AI Agent
            self.logger.info("Step 3: AI Content Generation...")
            content_results = self._execute_content_generation(request, species_results, route_results)
            
            # Step 4: Compile Results
            self.logger.info("Step 4: Compiling AI Results...")
            trip_plan = self._compile_trip_plan(request, species_results, route_results, content_results)
            
            self.logger.info("AI-powered trip planning completed successfully")
            return trip_plan
            
        except Exception as e:
            self.logger.error(f"AI agent orchestration failed: {str(e)}")
            self.logger.info("Falling back to core planner...")
            return self.core_planner.create_trip_plan(request)
    
    def _execute_species_analysis(self, request: TripRequest) -> AgentResult:
        """Execute species analysis using AI agent."""
        task = AgentTask(
            agent_name="SpeciesAgent",
            task_type="species_classification",
            input_data={
                "species": request.species,
                "location": request.base_location,
                "date_range": request.date_range
            },
            priority=1
        )
        
        return self.species_agent.execute(task)
    
    def _execute_route_optimization(self, request: TripRequest, 
                                  species_results: AgentResult) -> AgentResult:
        """Execute route optimization using AI agent."""
        task = AgentTask(
            agent_name="RouteAgent",
            task_type="route_optimization",
            input_data={
                "base_location": request.base_location,
                "target_species": request.species,
                "date_range": request.date_range,
                "max_stops": request.max_stops,
                "species_analysis": species_results.data
            },
            priority=2,
            dependencies=["SpeciesAgent"]
        )
        
        return self.route_agent.execute(task)
    
    def _execute_content_generation(self, request: TripRequest,
                                  species_results: AgentResult,
                                  route_results: AgentResult) -> AgentResult:
        """Execute content generation using AI agent."""
        task = AgentTask(
            agent_name="ContentAgent",
            task_type="content_generation",
            input_data={
                "trip_request": request.to_dict(),
                "species_analysis": species_results.data,
                "route_plan": route_results.data
            },
            priority=3,
            dependencies=["SpeciesAgent", "RouteAgent"]
        )
        
        return self.content_agent.execute(task)
    
    def _compile_trip_plan(self, request: TripRequest,
                          species_results: AgentResult,
                          route_results: AgentResult,
                          content_results: AgentResult) -> TripPlan:
        """Compile results from all agents into a complete trip plan."""
        
        # Extract data from agent results
        species_data = species_results.data.get("species_analysis", {})
        route_data = route_results.data.get("route_plan", {})
        content_data = content_results.data.get("content", {})
        
        # Create trip summary
        trip_summary = TripSummary(
            base_location=request.base_location,
            target_species=request.species,
            date_range=request.date_range,
            total_stops=route_data.get("total_stops", 0),
            total_distance_km=route_data.get("total_distance_km", 0.0),
            estimated_time=route_data.get("estimated_total_time", ""),
            species_tiers=species_data.get("species_tiers", {})
        )
        
        # Convert story cards and social captions to proper objects
        story_cards = []
        for story_data in content_data.get("story_cards", []):
            if isinstance(story_data, dict):
                from ..models.trip import StoryCard
                story_cards.append(StoryCard(
                    species=story_data.get("species", ""),
                    location=story_data.get("location", ""),
                    date=story_data.get("date", ""),
                    story=story_data.get("story", ""),
                    tier=story_data.get("tier", "")
                ))
            else:
                story_cards.append(story_data)
        
        social_captions = []
        for caption_data in content_data.get("social_captions", []):
            if isinstance(caption_data, dict):
                from ..models.trip import SocialCaption
                social_captions.append(SocialCaption(
                    species=caption_data.get("species", ""),
                    tier=caption_data.get("tier", ""),
                    caption=caption_data.get("caption", ""),
                    hashtags=caption_data.get("hashtags", [])
                ))
            else:
                social_captions.append(caption_data)
        
        # Create trip content
        trip_content = TripContent(
            trip_plan_markdown=content_data.get("trip_plan_markdown", ""),
            story_cards=story_cards,
            social_captions=social_captions
        )
        
        # Create complete trip plan
        trip_plan = TripPlan(
            trip_overview=trip_summary,
            species_analysis=species_data,
            route_plan=route_data,  # This should be a Route object, but we'll pass dict for now
            content=trip_content
        )
        
        return trip_plan
    
    def get_agent_status(self) -> Dict[str, Any]:
        """Get status of all AI agents."""
        return {
            "orchestrator": "active",
            "agents": {
                "species_agent": self.species_agent.get_status(),
                "route_agent": self.route_agent.get_status(),
                "content_agent": self.content_agent.get_status()
            },
            "total_agents": 3,
            "last_execution": datetime.now().isoformat()
        }
    
    def execute_agent_task(self, task: AgentTask) -> AgentResult:
        """Execute a specific agent task."""
        if task.agent_name == "SpeciesAgent":
            return self.species_agent.execute(task)
        elif task.agent_name == "RouteAgent":
            return self.route_agent.execute(task)
        elif task.agent_name == "ContentAgent":
            return self.content_agent.execute(task)
        else:
            raise ValueError(f"Unknown agent: {task.agent_name}")
    
    def get_agent_capabilities(self) -> Dict[str, List[str]]:
        """Get capabilities of all agents."""
        return {
            "SpeciesAgent": [
                "species_classification",
                "availability_analysis", 
                "tier_assignment",
                "confidence_scoring"
            ],
            "RouteAgent": [
                "route_optimization",
                "location_scoring",
                "distance_calculation",
                "hotspot_recommendation"
            ],
            "ContentAgent": [
                "story_generation",
                "caption_creation",
                "markdown_formatting",
                "social_media_content"
            ]
        } 